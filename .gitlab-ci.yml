# Prospero
#
# You should have received a copy of the license along with this program.
#
# Licensed under
# - GNU Affero General Public License V3
# - CeCILL Affero compliant

# GitLab CI/CD Pipeline Configuration file.
#
# See https://docs.gitlab.com/ee/ci/yaml/

image: ruby:2.6.5-alpine

stages:
  - checkstyle
  - test
  - deploy

checkstyle:
  stage: checkstyle
  before_script:
    # Install system requirements
    - apk add g++ make
    # Install Rubocop
    - gem install rubocop -v '~> 0.77.0'
  script:
    - rubocop

test:
  stage: test
  services:
    - postgres:12
  variables:
    COVERAGE: enabled
    DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: enabled
    DATABASE_URL: postgres://prospero:prospero@postgres:5432/prospero_test
    POSTGRES_USER: prospero
    POSTGRES_PASSWORD: prospero
    RAILS_ENV: test
  before_script:
    # Install system requirements
    - apk add g++ make postgresql-dev yarn nodejs
    # Install Bundler 2
    - gem install bundler:2.0.2
    # Build app
    - bundle install --with test
    - yarn install
    # Create database
    - rake db:create db:migrate
    # Compile JavaScript assets
    - rails webpacker:compile
  script:
    - bundle exec rspec
  coverage: /\(\d+.\d+\%\) covered/
  artifacts:
    paths:
      - coverage

# Publish coverage report
pages:
  stage: deploy
  dependencies:
    - test
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - develop

deploy-staging:
  stage: deploy
  before_script:
    - apk add git curl bash nodejs jq
    - curl https://cli-assets.heroku.com/install.sh | sh
    # Setup Heroku authentication
    - heroku_email=$(tools/ci_cd/scripts/print-heroku-email.sh $HEROKU_API_KEY)
    - cp tools/ci_cd/heroku/.netrc ~/
    - sed --in-place "s/\[LOGIN\]/$heroku_email/g" ~/.netrc
    - sed --in-place "s/\[PASSWORD\]/$HEROKU_API_KEY/g" ~/.netrc
    # Setup Git config
    - git config --global user.name 'GitLab CI/CD'
    - git config --global user.email ci@gitlab.com
    - heroku git:remote --app $HEROKU_APP_STAGING --remote staging
    # Enable maintenance mode on staging instance
    - heroku maintenance:on --app $HEROKU_APP_STAGING
  script:
    # Setup staging secret credentials
    # See https://guides.rubyonrails.org/security.html#custom-credentials
    - cp $CREDENTIALS_STAGING config/credentials.yml.enc
    - git add config/credentials.yml.enc
    # Deploy code
    - git commit --message "Deploy to staging"
    - git push staging HEAD:refs/heads/master --force
    # Run database migrations
    - heroku rake db:migrate --app $HEROKU_APP_STAGING
  after_script:
    # Disable maintenance mode on staging instance
    - heroku maintenance:off --app $HEROKU_APP_STAGING
  only:
    - develop

# If 'develop' has just been merged into to 'master', then create a Merge Request
# of 'master' into 'hotfix'.
#
# If 'hotfix' has just been merged into 'master', then create a Merge Request
# of 'master' into 'develop'.
#
# see docs/versioning_policy.md
synchronize-main-branches:
  stage: deploy
  before_script:
    - apk add bash curl jq
    - merged_branch=$(tools/ci_cd/scripts/print-merge-source.sh "$CI_COMMIT_TITLE")
    - if [ "$merged_branch" == "develop" ]; then target=hotfix; else target=develop; fi
  script: >
    tools/ci_cd/scripts/create-merge-request.sh \
      --gitlab-url $GITLAB_URL \
      --access-token $ACCESS_TOKEN \
      --project-name $CI_PROJECT_NAME \
      --project-namespace $CI_PROJECT_NAMESPACE \
      --source-branch master \
      --target-branch $target \
      --assignee-id $AUTOMATE_MERGE_ASSIGNEE_ID
  only:
    refs:
      - master
    variables:
      - $GITLAB_URL
      - $ACCESS_TOKEN
      - $AUTOMATE_MERGE_ASSIGNEE_ID

# Trigger job to push Docker image
#
# See https://framagit.org/prospero/prospero-docker/blob/master/.gitlab-ci.yml
publish-docker-image:
  stage: deploy
  before_script:
    - apk add bash curl jq
  script: >
    tools/ci_cd/scripts/create-pipeline.sh \
      --gitlab-url $GITLAB_URL \
      --access-token $ACCESS_TOKEN \
      --project-name $DOCKER_IMAGE_PROJECT_NAME \
      --project-namespace $DOCKER_IMAGE_PROJECT_NAMESPACE \
      --pipeline-ref master \
      --pipeline-variables "[{ \"key\": \"PROSPERO_VERSION\", \"value\": \"$CI_COMMIT_TAG\" }]"
  only:
    refs:
      - tags
    variables:
      - $GITLAB_URL
      - $ACCESS_TOKEN
      - $DOCKER_IMAGE_PROJECT_NAME
      - $DOCKER_IMAGE_PROJECT_NAMESPACE
